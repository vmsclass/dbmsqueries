SET SERVEROUTPUT ON;

--PROGRAM 1 : Example of initilizing variable
DECLARE  
   a integer := 30;  
   b integer := 40;  
   c integer;  
   f real;  
BEGIN  
   c := a + b;  
   dbms_output.put_line('Value of c: ' || c);  
   f := 100.0/3.0;  
   dbms_output.put_line('Value of f: ' || f);  
END;  
/

--PROGRAM 2: Example of Local and Global variables
DECLARE  
 -- Global variables   
   num1 number := 95;   
   num2 number := 85;   
BEGIN   
   dbms_output.put_line('Outer Variable num1: ' || num1);
   dbms_output.put_line('Outer Variable num2: ' || num2);  
   DECLARE   
      -- Local variables  
      num1 number := 195;   
      num2 number := 185;   
   BEGIN   
      dbms_output.put_line('Inner Variable num1: ' || num1);  
      dbms_output.put_line('Inner Variable num2: ' || num2);  
   END;   
END;  
/  

/*Syntax to declare a constant:

constant_name CONSTANT datatype := VALUE; */

--PROGRAM 3 : Example of PL/SQL constant
DECLARE  
   -- constant declaration  
   pi constant number := 3.141592654;  
   -- other declarations  
   radius number(5,2);   
   dia number(5,2);   
   circumference number(7, 2);  
   area number (10, 2);  
BEGIN   
   -- processing  
   radius := 9.5;   
   dia := radius * 2;   
   circumference := 2.0 * pi * radius;  
   area := pi * radius * radius;  
   -- output  
   dbms_output.put_line('Radius: ' || radius);  
   dbms_output.put_line('Diameter: ' || dia);  
   dbms_output.put_line('Circumference: ' || circumference);  
   dbms_output.put_line('Area: ' || area);  
END;  
/  
/* Syntax: (IF-THEN statement):

IF condition   
THEN   
Statement: {It is executed when condition is true}  
END IF;  */

--PROGRAM 4 : Example of PL/SQL If Statement

DECLARE  
   a number(3) := 500;  
BEGIN  
   -- check the boolean condition using if statement   
   IF( a < 20 ) THEN  
      -- if condition is true then print the following    
      dbms_output.put_line('a is less than 20 ' );  
   ELSE  
      dbms_output.put_line('a is not less than 20 ' );  
   END IF;  
   dbms_output.put_line('value of a is : ' || a);  
END;
/

/*
Syntax for the CASE Statement:
CASE [ expression ]  
WHEN condition_1 THEN result_1  
   WHEN condition_2 THEN result_2  
   ...  
   WHEN condition_n THEN result_n  
 ELSE result  
END   
*/

--porgram 5: Example of PL/SQL case statement
DECLARE  
   grade char(1) := 'A';  
BEGIN  
   CASE grade  
      when 'A' then dbms_output.put_line('Excellent');  
      when 'B' then dbms_output.put_line('Very good');  
      when 'C' then dbms_output.put_line('Good');  
      when 'D' then dbms_output.put_line('Average');  
      when 'F' then dbms_output.put_line('Passed with Grace');  
      else dbms_output.put_line('Failed');  
   END CASE;  
END;  
/

/* 
Syntax for a basic loop:

LOOP  
  Sequence of statements;  
END LOOP;  
*/
/*
Syntax of exit loop:
LOOP   
   statements;   
   EXIT;   
   {or EXIT WHEN condition;}  
END LOOP;  
*/

--program 6: Example of PL/SQL EXIT Loop

DECLARE  
i NUMBER := 1;  
BEGIN  
LOOP  
EXIT WHEN i>10;  
DBMS_OUTPUT.PUT_LINE(i);  
i := i+1;  
END LOOP;  
END;  
/

/*
Note: You must follow these steps while using PL/SQL Exit Loop.

Initialize a variable before the loop body
Increment the variable in the loop.
You should use EXIT WHEN statement to exit from the Loop. Otherwise the EXIT statement without WHEN condition, the statements in the Loop is executed only once.
*/

-- PROGRAM 7 : PL/SQL EXIT Loop Example 2

DECLARE   
VAR1 NUMBER;  
VAR2 NUMBER;  
BEGIN   
VAR1:=100;  
VAR2:=1;  
LOOP  
DBMS_OUTPUT.PUT_LINE (VAR1*VAR2);  
IF (VAR2=10) THEN  
EXIT;  
END IF;  
VAR2:=VAR2+1;  
END LOOP;  
END;  
/

/*
Syntax of while loop:

WHILE <condition>   
 LOOP statements;   
END LOOP; 
*/

--PROGRAM 8 : Example of PL/SQL While Loop

DECLARE  
i INTEGER := 1;  
BEGIN  
WHILE i <= 10 LOOP  
DBMS_OUTPUT.PUT_LINE(i);  
i := i+1;  
END LOOP;  
END;  
/















