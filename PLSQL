SET SERVEROUTPUT ON;

--PROGRAM 1 : Example of initilizing variable
DECLARE  
   a integer := 30;  
   b integer := 40;  
   c integer;  
   f real;  
BEGIN  
   c := a + b;  
   dbms_output.put_line('Value of c: ' || c);  
   f := 100.0/3.0;  
   dbms_output.put_line('Value of f: ' || f);  
END;  
/

--PROGRAM 2: Example of Local and Global variables
DECLARE  
 -- Global variables   
   num1 number := 95;   
   num2 number := 85;   
BEGIN   
   dbms_output.put_line('Outer Variable num1: ' || num1);
   dbms_output.put_line('Outer Variable num2: ' || num2);  
   DECLARE   
      -- Local variables  
      num1 number := 195;   
      num2 number := 185;   
   BEGIN   
      dbms_output.put_line('Inner Variable num1: ' || num1);  
      dbms_output.put_line('Inner Variable num2: ' || num2);  
   END;   
END;  
/  

/*Syntax to declare a constant:

constant_name CONSTANT datatype := VALUE; */

--PROGRAM 3 : Example of PL/SQL constant
DECLARE  
   -- constant declaration  
   pi constant number := 3.141592654;  
   -- other declarations  
   radius number(5,2);   
   dia number(5,2);   
   circumference number(7, 2);  
   area number (10, 2);  
BEGIN   
   -- processing  
   radius := 9.5;   
   dia := radius * 2;   
   circumference := 2.0 * pi * radius;  
   area := pi * radius * radius;  
   -- output  
   dbms_output.put_line('Radius: ' || radius);  
   dbms_output.put_line('Diameter: ' || dia);  
   dbms_output.put_line('Circumference: ' || circumference);  
   dbms_output.put_line('Area: ' || area);  
END;  
/  
/* Syntax: (IF-THEN statement):

IF condition   
THEN   
Statement: {It is executed when condition is true}  
END IF;  */

--PROGRAM 4 : Example of PL/SQL If Statement

DECLARE  
   a number(3) := 500;  
BEGIN  
   -- check the boolean condition using if statement   
   IF( a < 20 ) THEN  
      -- if condition is true then print the following    
      dbms_output.put_line('a is less than 20 ' );  
   ELSE  
      dbms_output.put_line('a is not less than 20 ' );  
   END IF;  
   dbms_output.put_line('value of a is : ' || a);  
END;
/

/*
Syntax for the CASE Statement:
CASE [ expression ]  
WHEN condition_1 THEN result_1  
   WHEN condition_2 THEN result_2  
   ...  
   WHEN condition_n THEN result_n  
 ELSE result  
END   
*/

--porgram 5: Example of PL/SQL case statement
DECLARE  
   grade char(1) := 'A';  
BEGIN  
   CASE grade  
      when 'A' then dbms_output.put_line('Excellent');  
      when 'B' then dbms_output.put_line('Very good');  
      when 'C' then dbms_output.put_line('Good');  
      when 'D' then dbms_output.put_line('Average');  
      when 'F' then dbms_output.put_line('Passed with Grace');  
      else dbms_output.put_line('Failed');  
   END CASE;  
END;  
/

/* 
Syntax for a basic loop:

LOOP  
  Sequence of statements;  
END LOOP;  
*/
/*
Syntax of exit loop:
LOOP   
   statements;   
   EXIT;   
   {or EXIT WHEN condition;}  
END LOOP;  
*/

--program 6: Example of PL/SQL EXIT Loop

DECLARE  
i NUMBER := 1;  
BEGIN  
LOOP  
EXIT WHEN i>10;  
DBMS_OUTPUT.PUT_LINE(i);  
i := i+1;  
END LOOP;  
END;  
/

/*
Note: You must follow these steps while using PL/SQL Exit Loop.

Initialize a variable before the loop body
Increment the variable in the loop.
You should use EXIT WHEN statement to exit from the Loop. Otherwise the EXIT statement without WHEN condition, the statements in the Loop is executed only once.
*/

-- PROGRAM 7 : PL/SQL EXIT Loop Example 2

DECLARE   
VAR1 NUMBER;  
VAR2 NUMBER;  
BEGIN   
VAR1:=100;  
VAR2:=1;  
LOOP  
DBMS_OUTPUT.PUT_LINE (VAR1*VAR2);  
IF (VAR2=10) THEN  
EXIT;  
END IF;  
VAR2:=VAR2+1;  
END LOOP;  
END;  
/

/*
Syntax of while loop:

WHILE <condition>   
 LOOP statements;   
END LOOP; 
*/

--PROGRAM 8 : Example of PL/SQL While Loop

DECLARE  
i INTEGER := 1;  
BEGIN  
WHILE i <= 10 LOOP  
DBMS_OUTPUT.PUT_LINE(i);  
i := i+1;  
END LOOP;  
END;  
/

/*
Note: You must follow these steps while using PL/SQL WHILE Loop.

Initialize a variable before the loop body.
Increment the variable in the loop.
You can use EXIT WHEN statements and EXIT statements in While loop but it is not done often.
*/

--PROGRAM 9 : PL/SQL WHILE Loop Example 2
DECLARE   
VAR1 NUMBER;  
VAR2 NUMBER;  
BEGIN   
VAR1:=200;  
VAR2:=1;  
WHILE (VAR2<=10)  
LOOP  
DBMS_OUTPUT.PUT_LINE (VAR1*VAR2);  
VAR2:=VAR2+1;  
END LOOP;  
END;  
/

/*

Syntax of for loop:

FOR counter IN initial_value .. final_value LOOP  
  LOOP statements;   
END LOOP;  

--initial_value : Start integer value
--final_value : End integer value

*/

--program 10 : PL/SQL For Loop Example 1

BEGIN  
FOR k IN 1..10 LOOP  
-- note that k was not declared  
DBMS_OUTPUT.PUT_LINE(k);  
END LOOP;  
END;   
/

/*
Note: You must follow these steps while using PL/SQL WHILE Loop.

You don't need to declare the counter variable explicitly because it is declared implicitly in the declaration section.
The counter variable is incremented by 1 and does not need to be incremented explicitly.
You can use EXIT WHEN statements and EXIT statements in FOR Loops but it is not done often.
*/

--program 11: PL/SQL For Loop Example 2
DECLARE   
VAR1 NUMBER;  
BEGIN   
VAR1:=10;  
FOR VAR2 IN 1..10  
LOOP  
DBMS_OUTPUT.PUT_LINE (VAR1*VAR2);  
END LOOP;  
END;  
/

--program 12 : PL/SQL For Loop REVERSE Example 

DECLARE   
VAR1 NUMBER;  
BEGIN   
VAR1:=10;  
FOR VAR2 IN REVERSE 1..10  
LOOP  
DBMS_OUTPUT.PUT_LINE (VAR1*VAR2);  
END LOOP;  
END; 
/

/*
PL/SQL Continue Statement:
Syntax:

continue; 

*/

--program 13 :Example of PL/SQL continue statement
DECLARE  
  x NUMBER := 0;  
BEGIN  
  LOOP -- After CONTINUE statement, control resumes here  
    DBMS_OUTPUT.PUT_LINE ('Inside loop:  x = ' || TO_CHAR(x));  
    x := x + 1;  
    IF x < 3 THEN  
      CONTINUE;  
    END IF;  
    DBMS_OUTPUT.PUT_LINE  
      ('Inside loop, after CONTINUE:  x = ' || TO_CHAR(x));  
    EXIT WHEN x = 5;  
  END LOOP;  
   
  DBMS_OUTPUT.PUT_LINE (' After loop:  x = ' || TO_CHAR(x));  
END;  
/  

/*
PL/SQL GOTO Statement:
syntax:
GOTO label_name;  

/*Here the label declaration which contains the label_name encapsulated within the << >> symbol and must be followed by at least one statement to execute.*/

GOTO label_name;  
 ..  
..  
<<label_name>>  
Statement;  

*/

--PROGRAM 14 : Example of PL/SQL GOTO statement

DECLARE  
   a number(2) := 30;  
BEGIN  
   <<loopstart>>  
   -- while loop execution   
   WHILE a < 50 LOOP  
      dbms_output.put_line ('value of a: ' || a);  
      a := a + 1;  
      IF a = 35 THEN  
         a := a + 1;  
         GOTO loopstart;  
      END IF;  
   END LOOP;  
END;  
/  

/*
Following is a list of some restrictions imposed on GOTO statement.

Cannot transfer control into an IF statement, CASE statement, LOOP statement or sub-block.
Cannot transfer control from one IF statement clause to another or from one CASE statement WHEN clause to another.
Cannot transfer control from an outer block into a sub-block.
Cannot transfer control out of a subprogram.
Cannot transfer control into an exception handler.
*/

/*
PL/SQL Procedure
The PL/SQL stored procedure or simply a procedure is a PL/SQL block which performs one or more specific tasks. It is just like procedures in other programming languages.

The procedure contains a header and a body.

Header: The header contains the name of the procedure and the parameters or variables passed to the procedure.
Body: The body contains a declaration section, execution section and exception section similar to a general PL/SQL block.
*/

/*
How to pass parameters in procedure:
When you want to create a procedure or function, you have to define parameters .There is three ways to pass parameters in procedure:

IN parameters: The IN parameter can be referenced by the procedure or function. The value of the parameter cannot be overwritten by the procedure or the function.
OUT parameters: The OUT parameter cannot be referenced by the procedure or function, but the value of the parameter can be overwritten by the procedure or function.
INOUT parameters: The INOUT parameter can be referenced by the procedure or function and the value of the parameter can be overwritten by the procedure or function.

NOTE  : A procedure may or may not return any value.
*/

/*
PL/SQL Create Procedure

Syntax for creating procedure:

CREATE [OR REPLACE] PROCEDURE procedure_name  
    [ (parameter [,parameter]) ]  
IS  
    [declaration_section]  
BEGIN  
    executable_section  
[EXCEPTION  
    exception_section]  
END [procedure_name]; 

*/

Create procedure example
In this example, we are going to insert record in user table. So you need to create user table first.

Table creation:

create table user(id number(10) primary key,name varchar2(100));  
Now write the procedure code to insert record in user table.

--Procedure Code:

create or replace procedure "INSERTUSER"    
(id IN NUMBER,    
name IN VARCHAR2)    
is    
begin    
insert into user values(id,name);    
end;    
/       

PL/SQL program to call procedure
Let's see the code to call above created procedure :

BEGIN    
   insertuser(101,'Rahul');  
   dbms_output.put_line('record inserted successfully');    
END;    
/    

--PL/SQL Drop Procedure
Syntax for drop procedure:

DROP PROCEDURE procedure_name;  

--Example of drop procedure

DROP PROCEDURE pro1; 


PL/SQL Function
Syntax to create a function:

CREATE [OR REPLACE] FUNCTION function_name [parameters]  
[(parameter_name [IN | OUT | IN OUT] type [, ...])]  
RETURN return_datatype  
{IS | AS}  
BEGIN  
   < function_body >  
END [function_name];  


--PROGRAM 15 : PL/SQL Function Example
--Let's see a simple example to create a function.

create or replace function adder(n1 in number, n2 in number)    
return number    
is     
n3 number(8);    
begin    
n3 :=n1+n2;    
return n3;    
end;    
/    

--Now write another program to call the function.

DECLARE    
   n3 number(2);    
BEGIN    
   n3 := adder(11,22);    
   dbms_output.put_line('Addition is: ' || n3);    
END;    
/    

--PL/SQL Recursive Function

--PROGRAM 16 : Example to calculate the factorial of a number

DECLARE  
   num number;  
   factorial number;  
  
FUNCTION fact(x number)  
RETURN number   
IS  
   f number;  
BEGIN  
   IF x=0 THEN  
      f := 1;  
   ELSE  
      f := x * fact(x-1);  
   END IF;  
RETURN f;  
END;  
  
BEGIN  
   num:= 6;  
   factorial := fact(num);  
   dbms_output.put_line(' Factorial '|| num || ' is ' || factorial);  
END;  
/  


--PL/SQL Drop Function:
Syntax for removing your created function:

DROP FUNCTION function_name;  


PL/SQL Cursor
REFER THIS LINK : https://www.javatpoint.com/pl-sql-cursor
A cursor is used to referred to a program to fetch and process the rows returned by the SQL statement, one at a time. There are two types of cursors:

Implicit Cursors
Explicit Cursors
1) PL/SQL Implicit Cursors
The implicit cursors are automatically generated by Oracle while an SQL statement is executed, if you don't use an explicit cursor for the statement.

These are created by default to process the statements when DML statements like INSERT, UPDATE, DELETE etc. are executed.

Orcale provides some attributes known as Implicit cursor's attributes to check the status of DML operations. Some of them are: %FOUND, %NOTFOUND, %ROWCOUNT and %ISOPEN.


PL/SQL Implicit Cursor Example
Create customers table and have records:

ID	NAME	   AGE	ADDRESS	  SALARY
1	Ramesh	23	  Allahabad	  20000
2	Suresh	22	  Kanpur	     22000
3	Mahesh	24	  Ghaziabad	  24000
4	Chandan	25	  Noida	     26000
5	Alex	   21	  Paris	     28000
6	Sunita	20	  Delhi	     30000

--Let's execute the following program to update the table and increase salary of each customer by 5000. Here, SQL%ROWCOUNT attribute is used to determine the number of rows affected:

--Create procedure:

DECLARE   
   total_rows number(2);  
BEGIN  
   UPDATE  customers  
   SET salary = salary + 5000;  
   IF sql%notfound THEN  
      dbms_output.put_line('no customers updated');  
   ELSIF sql%found THEN  
      total_rows := sql%rowcount;  
      dbms_output.put_line( total_rows || ' customers updated ');  
   END IF;   
END;  
/  








